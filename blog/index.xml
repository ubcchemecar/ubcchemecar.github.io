<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on UBC Chem-E-Car: The University of British Columbia</title>
    <link>http://www.ubcchemecar.com/blog/index.xml</link>
    <description>Recent content in Blog-rsses on UBC Chem-E-Car: The University of British Columbia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (C) 2016 UBC Chem-E-Car. All rights reserved.</copyright>
    <lastBuildDate>Sat, 24 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.ubcchemecar.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How To Create Dynamic Org Charts With Google Sheets and Javascript</title>
      <link>http://www.ubcchemecar.com/blog/2016/12/24/orgcharts/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2016/12/24/orgcharts/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/&#34;&gt;Google Chart&lt;/a&gt; library provides a convenient way of visualizing datasets using Javascript and embedding them in websites.&lt;/p&gt;

&lt;p&gt;For our &lt;a href=&#34;http://www.ubcchemecar.com/team/&#34;&gt;team page&lt;/a&gt;, we wanted to embed a dynamic orgchart that would be updated automatically using values stored in a Google Docs &amp;lsquo;database&amp;rsquo;. Finding online tutorials for this was a bit challenging, so here&amp;rsquo;s our implementation.&lt;/p&gt;

&lt;p&gt;If all goes well, you should get something like this, with the names, roles and relationships defined in a Google Sheet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/1.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;We will be using the &lt;code&gt;orgchart&lt;/code&gt; package in Google Charts. Our implementation will be somewhat similar to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;example&lt;/a&gt; in the Google Charts documentation, but instead of hardcoding the values in JavaScript, we will grab them dynamically from a Google Sheet data source.&lt;/p&gt;

&lt;h2 id=&#34;set-up-your-google-sheet&#34;&gt;Set up your Google Sheet&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;First, create a new Google Sheet with a title of your choice.&lt;/li&gt;
&lt;li&gt;In the first row, fill in the first 3 columns, A to C, with &amp;lsquo;Role&amp;rsquo;, &amp;lsquo;Reports To&amp;rsquo; and &amp;lsquo;Name&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Add in your team&amp;rsquo;s roles, names and organizational relationships in the subsequent rows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Role&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first column contains the role of the team member (i.e. Captain, Treasurer, Secretary). This is the green colored text in the screenshot above. The &lt;strong&gt;roles must be unique&lt;/strong&gt; or the orgchart won&amp;rsquo;t work properly. If you have multiple people with the same roles, add numbers or Roman numerals at the end (i.e. Webmaster I, Webmaster II).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reports To&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This column defines the relationships in the orgchart. Fill it up with the &lt;strong&gt;role&lt;/strong&gt; that this position reports to. A blank entry will place the box at the very top of the org chart. (i.e. the &lt;strong&gt;Reports To&lt;/strong&gt; entry for Captain will be blank).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self-explanatory, this column contains the names of the team members. This is the black colored text in the screenshot above.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Once you&amp;rsquo;re done, your Google Sheet should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/2.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;grab-your-google-sheet-data-in-json-format&#34;&gt;Grab your Google Sheet data in JSON format&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Once that&amp;rsquo;s done, click the big blue share button on the top right corner of the screen and change the sharing settings to &amp;lsquo;Anyone with the link &lt;strong&gt;Can View&lt;/strong&gt;&amp;rsquo;. Copy the URL for your Google Sheet from your browser, it should look something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/edit#gid=0&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get the data as a JSON file, modify the &lt;code&gt;edit#gid=0&lt;/code&gt; part to &lt;code&gt;gviz/tq&lt;/code&gt;, as below:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/gviz/tq&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you navigate to that link in your browser, you should get a &lt;code&gt;json.txt&lt;/code&gt; file. You will need this link for the next step.&lt;/p&gt;

&lt;h2 id=&#34;javascript-implementation&#34;&gt;Javascript Implementation&lt;/h2&gt;

&lt;p&gt;Once the Google Sheet &amp;lsquo;database&amp;rsquo; has been set up, create a new &lt;code&gt;orgchart.html&lt;/code&gt; (or any other name) file and paste in the following code. We will be using the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/reference#queryobjects&#34;&gt;Google Visualization API Query Language&lt;/a&gt; to help us grab data from our Google Sheet.&lt;/p&gt;

&lt;p&gt;Remember to replace &lt;code&gt;var dataSourceUrl&lt;/code&gt; with your own Google Sheet URL. Open the file in your browser, and you should see your orgchart!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;orgchart_admin&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://www.gstatic.com/charts/loader.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    google.charts.load(&#39;current&#39;, {&#39;packages&#39; : [&#39;orgchart&#39;, &#39;table&#39;]});
    google.charts.setOnLoadCallback(function() { initialize(&#39;&#39;) });

    function initialize() {
      document.getElementById(&#39;orgchart_admin&#39;).innerHTML = &amp;quot;&amp;lt;i class=&#39;fa fa-spinner fa-spin fa-3x fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;;
      
      var dataSourceUrl = &#39;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/gviz/tq?&#39;;

      // Tells it that the first row contains headers: &#39;Role&#39;, &#39;Reports To&#39;, &#39;Name&#39;
      var query = new google.visualization.Query(dataSourceUrl + &#39;&amp;amp;headers=1&#39;);

      // Send the query with a callback function.
      query.send(handleQueryResponse);
    }

    function handleQueryResponse(response) {
      // Called when the query response is returned.
      if (response.isError()) {
        alert(&#39;Error in query: &#39; + response.getMessage() + &#39; &#39; + response.getDetailedMessage());
        return;
      }

      var raw_data = response.getDataTable();
      var data = new google.visualization.DataTable();

      data.addColumn(&#39;string&#39;, &#39;Entity&#39;);
      data.addColumn(&#39;string&#39;, &#39;ParentEntity&#39;);
      data.addColumn(&#39;string&#39;, &#39;ToolTip&#39;);

      // Loops through all rows and populates a new DataTable with formatted values for the orgchart
      var num_rows = raw_data.getNumberOfRows();
      for (var i = 0; i &amp;lt; num_rows; i++) {
        var role = raw_data.getValue(i, 0);
        var reportsTo = raw_data.getValue(i,1);
        var name = raw_data.getValue(i,2) != null ? raw_data.getValue(i,2) : &#39;&#39;;

        data.addRows([[
          { v: role,
            f: name + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
          }, 
          reportsTo, 
          name]]);
      }

      // Loops through all rows and populates a new DataTable with formatted values for the orgchart
      var container = document.getElementById(&#39;orgchart_admin&#39;);
      var chart = new google.visualization.OrgChart(container);
      chart.draw(data, {allowHtml:true, &#39;size&#39;: &#39;large&#39;});
    }      
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;breaking-down-the-script&#34;&gt;Breaking down the script&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;initialize()&lt;/code&gt; function, we used the &lt;code&gt;Query&lt;/code&gt; class to grab data from our Google Sheet. This is very similar to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/spreadsheets&#34;&gt;example&lt;/a&gt; in the documentation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &lt;code&gt;handleQueryResponse()&lt;/code&gt; callback function, if the query is successful, we can get the data as a &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/datatables_dataviews&#34;&gt;DataTable&lt;/a&gt; with &lt;code&gt;raw_data = response.getDataTable()&lt;/code&gt;. A DataTable is essentially an array of columns and rows used by Google Charts to represent chart data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We then looped through our &lt;code&gt;raw_data&lt;/code&gt; and populated a new DataTable, &lt;code&gt;var data = new google.visualization.DataTable()&lt;/code&gt;. We did this row by row with the &lt;code&gt;addRows()&lt;/code&gt; function. We did this because the &lt;code&gt;orgchart&lt;/code&gt; package takes in 3 columns, according to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;documentation&lt;/a&gt; and we want to add formatted values to the first column:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First Column&lt;/strong&gt;
The first column is the node ID (each node is a box in the org chart) and as previously mentioned, it should be unique. We can either show the node ID in the box, or use a prettier formatted value, &lt;code&gt;f&lt;/code&gt; to show in the box, but the unformatted value, &lt;code&gt;v&lt;/code&gt; is still used as the ID. Having formatted values allows us to display the name and role (or optionally, even more data like pictures) in different colors in the same box.&lt;/p&gt;

&lt;p&gt;In our orgchart, we want to display both the name and the role, with the role in a different color. So in the code above, we defined the formatted value as follows, with &lt;code&gt;div&lt;/code&gt; tags around &lt;code&gt;role&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;f: name + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Second Column&lt;/strong&gt;
The second column defines the parent node of the current box (i.e. the relationship data) using the unformatted value, &lt;code&gt;v&lt;/code&gt; of the parent node. If this is left blank, the node will be defined as a root node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Column&lt;/strong&gt;
The third and optional column defines the tooltip text, the text that pops up when you hover your mouse over the box.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, in the last part of the script, we made a call to &lt;code&gt;new google.visualization.OrgChart()&lt;/code&gt; to display our chart in the web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var container = document.getElementById(&#39;orgchart_admin&#39;);
var chart = new google.visualization.OrgChart(container);
chart.draw(data, {allowHtml:true, &#39;size&#39;: &#39;large&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;styling-the-org-chart&#34;&gt;Styling the org chart&lt;/h2&gt;

&lt;p&gt;So far, we&amp;rsquo;ve managed to display our org chart, but we haven&amp;rsquo;t added the formatting yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/3.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;To change the text color for the roles in the box, we need to add some CSS. Let&amp;rsquo;s modify the head section in the code above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;head&amp;gt;
  &amp;lt;style&amp;gt;
  .role{
      font-size: small;
      color: #1aa;
  }   
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see the font size and colors updated for the roles if you refresh your page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/4.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! Using CSS, you can also style the names by wrapping them with div tags. You can also play around with the box colors, font size and anything else in the org chart. Refer to the Google Charts &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;documentation&lt;/a&gt; for further information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;f: &amp;quot;&amp;lt;div class=&#39;name&#39;&amp;gt;&amp;quot; + name + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot; + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Importance of Trial and Error</title>
      <link>http://www.ubcchemecar.com/blog/2016/11/24/trial-and-error/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2016/11/24/trial-and-error/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Welcome everyone to the first of (hopefully) many blog posts for the UBC Chem-E-Car Team. The purpose of these posts is to give you, the reader insight into how our organization is run. Through this we hope to generate interest in our organization and to help get other students involved.&lt;/p&gt;

&lt;p&gt;The topic of our first post is on the importance of trial and error. Most people will look at a finished product and comment on how sleek or amazing it is; while conveniently ignoring that it took years of tinkering and modifications for that item to even function properly!&lt;/p&gt;

&lt;p&gt;First let’s take a look at the first electronic circuit that I ever made for Chem-E-Car:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/first.jpg&#34; alt=&#34;First&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The entire device is a mess! There are wires everywhere, tons of unused board real estate, and parts that have to be tied together to fit on the board. Likewise, unsecured parts have a very unreliable connection and break off easily.&lt;/p&gt;

&lt;p&gt;Over the summer I made a new model with the focus of eliminating loose wires and better utilizing space, this is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/second.jpg&#34; alt=&#34;Second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This model utilizes a lot less space, is easy to stack, and most of the components are stabilized on the board itself. However, during assembly I needed a lot of extra parts since directly soldering them often destroyed the part if not done properly. Another issue is that the model needed 4 stacks (making it really tall), and the lights and switches were not necessary. Now let’s look at the second iteration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/third.jpg&#34; alt=&#34;Third&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The board is even MORE compact, features detachable modules for easy replacement, and utilizes an SD card and opto-gate for recording data. However, the connectors were unreliable, the copper on the board was unprotected and prone to damage which destroyed the circuit at times, and data could not be read in real time.&lt;/p&gt;

&lt;p&gt;To fix these issues I developed a 4th and final board:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/fourth.jpg&#34; alt=&#34;Fourth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This system uses reliable connectors that can only be inserted in one direction, is completely modular (easy to replace destroyed parts), has a silkscreen layer that protects the circuit, only uses one layer, and utilizes a bluetooth system for real time data collection on a mobile phone!&lt;/p&gt;

&lt;p&gt;Here is an image of all the circuits for an overall comparison:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/comparison.jpg&#34; alt=&#34;Comparison&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;reflections&#34;&gt;Reflections&lt;/h3&gt;

&lt;p&gt;These circuits are 1.5 years of continuous design and iteration, with each model having its flaws analyzed and corrected. They were made by an entry level chemical engineering student with NO prior experience or knowledge of electronics. The moral of the story? Good design is all about making something, figuring out what works and doesn’t work then rebuilding it until it sort of works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/quote.jpg&#34; alt=&#34;Quote&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, to any beginner in terms of design, don’t despair! Rather look at what you can learn from your prototype and how it can be improved.&lt;/p&gt;

&lt;p&gt;In that sense it is important to seek the feedback of experienced individuals. Their experience (in how NOT to do things wrong by doing it wrong) is invaluable for any would-be inventor. Look at how others have done things and learn accordingly from it. Finally remember, every master in a subject started from knowing nothing; the difference between them and the amateurs is that they never stopped trying to learn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linked post</title>
      <link>http://www.ubcchemecar.com/blog/2015/10/02/linked-post/</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2015/10/02/linked-post/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;menu = &amp;quot;main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus. Pellentesque sed tempus risus. Proin id hendrerit ante. Vestibulum vitae urna ut mauris ultricies dignissim. Ut ante turpis, tristique vitae sagittis quis, sagittis nec diam. Fusce pulvinar cursus porta. Vivamus maximus leo dolor, ut pellentesque lorem fringilla nec. Mauris faucibus turpis posuere sapien euismod, a ullamcorper mi maximus.&lt;/p&gt;

&lt;p&gt;Morbi varius ex vel justo dictum placerat. Sed ac arcu pretium, varius elit eget, gravida purus. Fusce sit amet massa mollis eros tincidunt sollicitudin. Suspendisse iaculis cursus mauris ut sagittis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas elit ligula, molestie quis magna eu, semper posuere lorem. Mauris a justo pharetra, congue ex eget, tincidunt massa. Maecenas sit amet neque lorem.&lt;/p&gt;

&lt;p&gt;Curabitur at elementum quam. Curabitur tristique elit non sapien aliquam vulputate. Vivamus in odio tincidunt, tempor sem quis, tincidunt lacus. Mauris pulvinar nunc sed tempus dictum. Nam vel arcu quis mi fermentum ullamcorper non ac lacus. Donec aliquet vitae ante at imperdiet. Aenean scelerisque venenatis urna, eget elementum risus convallis ac. Nullam gravida arcu lacus, non consectetur augue pretium non. Duis dignissim eros id urna pretium congue. Nullam eu magna in sem sollicitudin tempor. Pellentesque vel convallis ligula. Quisque semper, turpis a rhoncus efficitur, magna nibh iaculis elit, eget tempor dolor eros ut mi. Maecenas eu placerat lacus. Praesent congue pretium nulla, sed suscipit metus rutrum vel.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>http://www.ubcchemecar.com/blog/2015/09/17/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2015/09/17/go-is-for-lovers/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;http://www.ubcchemecar.com/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;http://www.ubcchemecar.com/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize | lower  }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;http://www.ubcchemecar.com/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo is for lovers</title>
      <link>http://www.ubcchemecar.com/blog/2015/08/03/hugo-is-for-lovers/</link>
      <pubDate>Mon, 03 Aug 2015 13:39:46 +0200</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2015/08/03/hugo-is-for-lovers/</guid>
      <description>

&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Goto &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;http://www.ubcchemecar.com/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;

&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;

&lt;p&gt;Follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;

&lt;h2 id=&#34;step-3-change-the-docs-site&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;

&lt;p&gt;Stop the Hugo process by hitting ctrl+c.&lt;/p&gt;

&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;

&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;

&lt;h2 id=&#34;step-4-have-fun&#34;&gt;Step 4. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>