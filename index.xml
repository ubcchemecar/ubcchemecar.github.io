<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UBC Chem-E-Car: The University of British Columbia</title>
    <link>http://www.ubcchemecar.com/index.xml</link>
    <description>Recent content on UBC Chem-E-Car: The University of British Columbia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (C) 2016 UBC Chem-E-Car. All rights reserved.</copyright>
    <lastBuildDate>Thu, 12 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.ubcchemecar.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beer Homebrew Project</title>
      <link>http://www.ubcchemecar.com/blog/2017/01/12/beer/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2017/01/12/beer/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;With the Student AIChE/CACHE National Mobile Device APP Competition around the corner, our team has been working hard in exploring different ideas to showcase our creativity in a practical design. As part of our lab course field trips, many of us have visited local breweries to gain a general overview of how the general brewing process works. Keeping this in mind, we decided to try something that none of us have done before: creating an app to automate the brewing of craft beer. To create this app, we first had to be confident in carrying out the brewing process itself. Thus, we are proud to present the CHBE Brewing team, a sub-division of the Chem-E-Car team!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/beer/logo.png&#34; width=&#34;100%&#34;&gt;
&lt;i&gt;Logo design courtesy of &lt;a href=&#34;https://www.amandapenuta.com/&#34;&gt;Amanda Penuta&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&#34;literature-review&#34;&gt;Literature Review&lt;/h2&gt;

&lt;p&gt;We began with browsing the web on what kind of equipment would be required to begin brewing. Without any prior experience in brewing, it was difficult to know whether we really &lt;strong&gt;needed&lt;/strong&gt; that $300 &amp;ldquo;All-in-One Reactor&amp;rdquo;. Instead, we chose to drop by some local homebrewing businesses to learn more about the process. We ended up going to Centennial Homebrewing Supplies and speaking with the owner, Brian Janzen. Brian was extremely informative, guiding us through the steps of homebrewing; from choosing the right equipment for beginner brewing, to bottling the brew at the very end. His tutorial can be found &lt;a href=&#34;https://www.youtube.com/watch?v=mxdreV_tN1Y/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-brewing-process&#34;&gt;The Brewing Process&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/beer/flowchart.jpg&#34; width=&#34;100%&#34;&gt;
&lt;i&gt;Overview of the extract brewing process that we followed.&lt;/i&gt;&lt;/p&gt;

&lt;h3 id=&#34;sanitizing&#34;&gt;Sanitizing&lt;/h3&gt;

&lt;p&gt;Armed with this new knowledge, we purchased the equipment and got to work. We began with sanitizing all the equipment with Sani-brew (1 tbsp. powder/L of water) cleaning solution. This is to ensure that chance of bacterial growth or contamination is minimized.&lt;/p&gt;

&lt;h3 id=&#34;mashing&#34;&gt;Mashing&lt;/h3&gt;

&lt;p&gt;The next step is to &amp;ldquo;mash the grains&amp;rdquo;. Contrary to what we initially thought, it had nothing to do with physically mashing the grains. This step involved adding 1L of water for each lb of grain that we had (2.5L of water in our case) to a pot and bringing the temperature up to ~145 to 155°F (~63 to 68°C). This mixture was then allowed to steep for about 60 minutes. Due to the uneven heating from the stove we were using, the grains ended up being slightly burnt&amp;hellip; but that just adds more flavor to the brew, right? (To be confirmed)&lt;/p&gt;

&lt;h3 id=&#34;sparging&#34;&gt;Sparging&lt;/h3&gt;

&lt;p&gt;As the grains were steeping, another pot of water was heated up to about 175°F (~79°C). This pot of water was used in the sparging (rinsing) step. This was done by pouring the steeped grains mixture into a colander, and the additional water through the grains into another pot. The liquid that drains through is the base of our wort, while the spent grains were disposed of. The liquid malt extract was added to the wort base and stirred well until the mixture was uniform. This was done before the stove was turned on to prevent the mixture from burning and sticking to the bottom of the pot. The mixture was then brought to a boil. During this boiling time, the primary fermenter was sanitized using the Sani-brew cleaning solution.&lt;/p&gt;

&lt;h3 id=&#34;boiling&#34;&gt;Boiling&lt;/h3&gt;

&lt;p&gt;Once the wort was boiling, we set a timer for 60 minutes of boiling. Throughout this timeframe, hops were added at different times. For example, the Pacific ESB we were making required the 3 bags of hops to be added in at 0 minutes (beginning of boil), 45 minutes, and 55 minutes of boiling time. Once the boiling time was complete, the wort was then plunged into an ice bath to cool it down. As Vancouver has been experiencing heavy snowfall (by our standards), our ice bath consisted of snow and ice taken from right outside our doorstep. Once the wort reached a temperature of around ~69 to 73°F (~20.5 to 23°C), it was poured into the primary fermenter. The primary fermenter was topped off with water so the total volume of the brew was about 23L, with the temperature being around 21°C for optimal yeast pitching.&lt;/p&gt;

&lt;h3 id=&#34;fermenting&#34;&gt;Fermenting&lt;/h3&gt;

&lt;p&gt;Before the yeast was added to the wort, a test was conducted using a hydrometer. This showed the starting gravity of the wort, with the potential final alcohol content (around 6.5% for our brew). The yeast was added to the wort and the primary fermenter was sealed with an airlock (this allows carbon dioxide to escape during fermentation, but nothing to go into the brew). The primary fermenter was then left to sit for about a week.&lt;/p&gt;

&lt;h3 id=&#34;conditioning&#34;&gt;Conditioning&lt;/h3&gt;

&lt;p&gt;After a week of fermentation, the brew was transported into the carboy for conditioning and additional fermentation. The brew was siphoned out using a tube with a filter attached to the end to prevent larger solids from going through. Once all the brew was transported to the carboy, it was sealed with another airlock and left to sit for another week.&lt;/p&gt;

&lt;p&gt;With a total of two weeks of fermentation, the brew was about ready to bottle. Another test was done with the hydrometer (pictured below) to see if the fermentation was near completion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/beer/hydrometer.jpg&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;It was recommended that the reading on the hydrometer to be around 1008 to 1010, which indicates that fermentation was near completion. Our reading was roughly 1014, so pretty close.&lt;/i&gt;&lt;/p&gt;

&lt;h3 id=&#34;bottling-and-carbonation&#34;&gt;Bottling and Carbonation&lt;/h3&gt;

&lt;p&gt;At this point, the brew was basically flat (not a lot of carbonation). The next step involved adding &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; cup of dextrose (priming sugar) into the brew before bottling. Since the bottles are left capped for two more weeks, the priming sugar causes carbonation to occur. The brew was siphoned into two types of bottles that we purchased: 1L EZ-cap bottles and 330mL bottles with crown caps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/beer/capper.jpg&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Capping is hard work. (No, it&amp;rsquo;s not)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/beer/bottles.jpg&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Bottled and ready to drink! (In two weeks)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Now we just need to wait about one more week from this time of posting for the carbonation to finalize. Hopefully we will have great tasting beer to drink!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solder Fan System</title>
      <link>http://www.ubcchemecar.com/blog/2017/01/01/solder-fan-system/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2017/01/01/solder-fan-system/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve been playing around with old computer power supplies. Naturally, that led me to other components of the computer, namely, the cooling fan. These fans are driven by a brushless DC motor system. This is to achieve a reduced sound and higher efficiency compared to a brushed DC motor system such as those you would see (or hear) in printers, air conditioners and RC cars.&lt;/p&gt;

&lt;p&gt;Computer fans can range from very simple to kind-of-simple with 2, 3, and 4 wires coming out of it. The 2 wire configuration is the simplest and this is just power and ground. A third wire is introduced to be able to monitor the speed of the fan. This is done most commonly by using a hall sensor to measure the rotations of the rotors around the commutator. The 4th wire adds PWM control to the fan so that consumers can control the speed of the fan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/solder-fan/2wirefan.jpg&#34;&gt;
&lt;i&gt;A two wire fan circuit. Check out &lt;a href=&#34;http://pcbheaven.com/wikipages/How_PC_Fans_Work/&#34;&gt;PCB Heaven&lt;/a&gt; for more info&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;How useful are these fans? Under normal operating temperatures, the pi typically reaches ~68 C, and ~80 C when performing calculations or running a video. With the fan, the temperature is quickly lowered to ~37 C. Another use for these fans is for soldering. They create a vaccuum to garner the toxic fumes from the solder.&lt;/p&gt;

&lt;p&gt;Soldering fumes are bad for you! They are a mix of lead, and rosin evaporated into a gas. Always have good ventilation when you solder. I use my PC fans to create a solder fume extractor that I would otherwise, have to buy commercially &lt;a href=&#34;http://www.digikey.ca/product-detail/en/apex-tool-group/WSA350/WSA350-ND/1130559&#34;&gt;like this&lt;/a&gt;. I created a tiny switch board for my fans and I had them running! This was a good start but it didnt fully solve the problem as the fumes were merely being diluted. To rectify this I bought some carbon filters and attached them onto my fans. The trade-off is that this lowers the volume of air displaced by the fan but fumes actually become trapped by the carbon filter.&lt;/p&gt;

&lt;p&gt;The circuit I used was a simple switch inline to a computer power supply to power the fans. I am a large fan (no pun intended) of modularity, the ability to switch and recombine components. Sometimes, I need the power supply for a different task, or I need the fan to be cooling rather than extracting particulates.&lt;/p&gt;

&lt;p&gt;My circuit was simple enough that I didnt need a breadboard. I also wanted my circuit to be more permanent and didn&amp;rsquo;t want to spend time or money making a PCB, so I went with a perf board. Perfboards come in many varieties with copper strips exactly like a breadboard or long strips down the board but they are known traditionally as boards with arrays of little holes punched into them and copper vias surrounding them to create a contact for soldering.&lt;/p&gt;

&lt;p&gt;Perfboards are a step behind making an actual PCB that you would see inside any electronic component but I believe that they are more difficult to make. With CAD software out there such as EAGLECAD or Fritzing, making a PCB is very visual. The graphical interfaces allow you to easily create a route and undo it with a simple click of a button. With a perfboard it is more difficult as there isn&amp;rsquo;t this interface. Planning it becomes a lot more tedious with pencil and paper and having to make iterations&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/solder-fan/circuit.jpg&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;For my perfboard I used two rows of header pins to allow multiple fan systems as well as the connection to the power supply. A set-screw hub enable the switch to be inserted and removed at a moments notice.&lt;/p&gt;

&lt;p&gt;Now I just need to wait for my fans to come in from the internet (that was a pun)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Create Dynamic Org Charts With Google Sheets and Javascript</title>
      <link>http://www.ubcchemecar.com/blog/2016/12/24/orgcharts/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2016/12/24/orgcharts/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/&#34;&gt;Google Chart&lt;/a&gt; library provides a convenient way of visualizing datasets using Javascript and embedding them in websites.&lt;/p&gt;

&lt;p&gt;For our &lt;a href=&#34;http://www.ubcchemecar.com/team/&#34;&gt;team page&lt;/a&gt;, we wanted to embed a dynamic orgchart that would be updated automatically using values stored in a Google Docs &amp;lsquo;database&amp;rsquo;. Finding online tutorials for this was a bit challenging, so here&amp;rsquo;s our implementation.&lt;/p&gt;

&lt;p&gt;If all goes well, you should get something like this, with the names, roles and relationships defined in a Google Sheet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/1.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;We will be using the &lt;code&gt;orgchart&lt;/code&gt; package in Google Charts. Our implementation will be somewhat similar to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;example&lt;/a&gt; in the Google Charts documentation, but instead of hardcoding the values in JavaScript, we will grab them dynamically from a Google Sheet data source.&lt;/p&gt;

&lt;h2 id=&#34;set-up-your-google-sheet&#34;&gt;Set up your Google Sheet&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;First, create a new Google Sheet with a title of your choice.&lt;/li&gt;
&lt;li&gt;In the first row, fill in the first 3 columns, A to C, with &amp;lsquo;Role&amp;rsquo;, &amp;lsquo;Reports To&amp;rsquo; and &amp;lsquo;Name&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Add in your team&amp;rsquo;s roles, names and organizational relationships in the subsequent rows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Role&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first column contains the role of the team member (i.e. Captain, Treasurer, Secretary). This is the green colored text in the screenshot above. The &lt;strong&gt;roles must be unique&lt;/strong&gt; or the orgchart won&amp;rsquo;t work properly. If you have multiple people with the same roles, add numbers or Roman numerals at the end (i.e. Webmaster I, Webmaster II).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reports To&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This column defines the relationships in the orgchart. Fill it up with the &lt;strong&gt;role&lt;/strong&gt; that this position reports to. A blank entry will place the box at the very top of the org chart. (i.e. the &lt;strong&gt;Reports To&lt;/strong&gt; entry for Captain will be blank).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self-explanatory, this column contains the names of the team members. This is the black colored text in the screenshot above.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Once you&amp;rsquo;re done, your Google Sheet should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/2.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;grab-your-google-sheet-data-in-json-format&#34;&gt;Grab your Google Sheet data in JSON format&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Once that&amp;rsquo;s done, click the big blue share button on the top right corner of the screen and change the sharing settings to &amp;lsquo;Anyone with the link &lt;strong&gt;Can View&lt;/strong&gt;&amp;rsquo;. Copy the URL for your Google Sheet from your browser, it should look something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/edit#gid=0&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get the data as a JSON file, modify the &lt;code&gt;edit#gid=0&lt;/code&gt; part to &lt;code&gt;gviz/tq&lt;/code&gt;, as below:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/gviz/tq&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you navigate to that link in your browser, you should get a &lt;code&gt;json.txt&lt;/code&gt; file. You will need this link for the next step.&lt;/p&gt;

&lt;h2 id=&#34;javascript-implementation&#34;&gt;Javascript Implementation&lt;/h2&gt;

&lt;p&gt;Once the Google Sheet &amp;lsquo;database&amp;rsquo; has been set up, create a new &lt;code&gt;orgchart.html&lt;/code&gt; (or any other name) file and paste in the following code. We will be using the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/reference#queryobjects&#34;&gt;Google Visualization API Query Language&lt;/a&gt; to help us grab data from our Google Sheet.&lt;/p&gt;

&lt;p&gt;Remember to replace &lt;code&gt;var dataSourceUrl&lt;/code&gt; with your own Google Sheet URL. Open the file in your browser, and you should see your orgchart!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;orgchart_admin&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://www.gstatic.com/charts/loader.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    google.charts.load(&#39;current&#39;, {&#39;packages&#39; : [&#39;orgchart&#39;, &#39;table&#39;]});
    google.charts.setOnLoadCallback(function() { initialize(&#39;&#39;) });

    function initialize() {
      document.getElementById(&#39;orgchart_admin&#39;).innerHTML = &amp;quot;&amp;lt;i class=&#39;fa fa-spinner fa-spin fa-3x fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;;
      
      var dataSourceUrl = &#39;https://docs.google.com/spreadsheets/d/1qImsDykMfz-obbMsOQo6f_IW_xmNdtScByEhcnfU3S8/gviz/tq?&#39;;

      // Tells it that the first row contains headers: &#39;Role&#39;, &#39;Reports To&#39;, &#39;Name&#39;
      var query = new google.visualization.Query(dataSourceUrl + &#39;&amp;amp;headers=1&#39;);

      // Send the query with a callback function.
      query.send(handleQueryResponse);
    }

    function handleQueryResponse(response) {
      // Called when the query response is returned.
      if (response.isError()) {
        alert(&#39;Error in query: &#39; + response.getMessage() + &#39; &#39; + response.getDetailedMessage());
        return;
      }

      var raw_data = response.getDataTable();
      var data = new google.visualization.DataTable();

      data.addColumn(&#39;string&#39;, &#39;Entity&#39;);
      data.addColumn(&#39;string&#39;, &#39;ParentEntity&#39;);
      data.addColumn(&#39;string&#39;, &#39;ToolTip&#39;);

      // Loops through all rows and populates a new DataTable with formatted values for the orgchart
      var num_rows = raw_data.getNumberOfRows();
      for (var i = 0; i &amp;lt; num_rows; i++) {
        var role = raw_data.getValue(i, 0);
        var reportsTo = raw_data.getValue(i,1);
        var name = raw_data.getValue(i,2) != null ? raw_data.getValue(i,2) : &#39;&#39;;

        data.addRows([[
          { v: role,
            f: name + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
          }, 
          reportsTo, 
          name]]);
      }

      // Loops through all rows and populates a new DataTable with formatted values for the orgchart
      var container = document.getElementById(&#39;orgchart_admin&#39;);
      var chart = new google.visualization.OrgChart(container);
      chart.draw(data, {allowHtml:true, &#39;size&#39;: &#39;large&#39;});
    }      
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;breaking-down-the-script&#34;&gt;Breaking down the script&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;initialize()&lt;/code&gt; function, we used the &lt;code&gt;Query&lt;/code&gt; class to grab data from our Google Sheet. This is very similar to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/spreadsheets&#34;&gt;example&lt;/a&gt; in the documentation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &lt;code&gt;handleQueryResponse()&lt;/code&gt; callback function, if the query is successful, we can get the data as a &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/datatables_dataviews&#34;&gt;DataTable&lt;/a&gt; with &lt;code&gt;raw_data = response.getDataTable()&lt;/code&gt;. A DataTable is essentially an array of columns and rows used by Google Charts to represent chart data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We then looped through our &lt;code&gt;raw_data&lt;/code&gt; and populated a new DataTable, &lt;code&gt;var data = new google.visualization.DataTable()&lt;/code&gt;. We did this row by row with the &lt;code&gt;addRows()&lt;/code&gt; function. We did this because the &lt;code&gt;orgchart&lt;/code&gt; package takes in 3 columns, according to the &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;documentation&lt;/a&gt; and we want to add formatted values to the first column:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First Column&lt;/strong&gt;
The first column is the node ID (each node is a box in the org chart) and as previously mentioned, it should be unique. We can either show the node ID in the box, or use a prettier formatted value, &lt;code&gt;f&lt;/code&gt; to show in the box, but the unformatted value, &lt;code&gt;v&lt;/code&gt; is still used as the ID. Having formatted values allows us to display the name and role (or optionally, even more data like pictures) in different colors in the same box.&lt;/p&gt;

&lt;p&gt;In our orgchart, we want to display both the name and the role, with the role in a different color. So in the code above, we defined the formatted value as follows, with &lt;code&gt;div&lt;/code&gt; tags around &lt;code&gt;role&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;f: name + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Second Column&lt;/strong&gt;
The second column defines the parent node of the current box (i.e. the relationship data) using the unformatted value, &lt;code&gt;v&lt;/code&gt; of the parent node. If this is left blank, the node will be defined as a root node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Column&lt;/strong&gt;
The third and optional column defines the tooltip text, the text that pops up when you hover your mouse over the box.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, in the last part of the script, we made a call to &lt;code&gt;new google.visualization.OrgChart()&lt;/code&gt; to display our chart in the web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var container = document.getElementById(&#39;orgchart_admin&#39;);
var chart = new google.visualization.OrgChart(container);
chart.draw(data, {allowHtml:true, &#39;size&#39;: &#39;large&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;styling-the-org-chart&#34;&gt;Styling the org chart&lt;/h2&gt;

&lt;p&gt;So far, we&amp;rsquo;ve managed to display our org chart, but we haven&amp;rsquo;t added the formatting yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/3.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;To change the text color for the roles in the box, we need to add some CSS. Let&amp;rsquo;s modify the head section in the code above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;head&amp;gt;
  &amp;lt;style&amp;gt;
  .role{
      font-size: small;
      color: #1aa;
  }   
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see the font size and colors updated for the roles if you refresh your page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/orgcharts/4.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! Using CSS, you can also style the names by wrapping them with div tags. You can also play around with the box colors, font size and anything else in the org chart. Refer to the Google Charts &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/orgchart&#34;&gt;documentation&lt;/a&gt; for further information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;f: &amp;quot;&amp;lt;div class=&#39;name&#39;&amp;gt;&amp;quot; + name + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot; + &amp;quot;&amp;lt;div class=&#39;role&#39;&amp;gt;&amp;quot; + role + &amp;quot;&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Importance of Trial and Error</title>
      <link>http://www.ubcchemecar.com/blog/2016/11/24/trial-and-error/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2016/11/24/trial-and-error/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Welcome everyone to the first of (hopefully) many blog posts for the UBC Chem-E-Car Team. The purpose of these posts is to give you, the reader insight into how our organization is run. Through this we hope to generate interest in our organization and to help get other students involved.&lt;/p&gt;

&lt;p&gt;The topic of our first post is on the importance of trial and error. Most people will look at a finished product and comment on how sleek or amazing it is; while conveniently ignoring that it took years of tinkering and modifications for that item to even function properly!&lt;/p&gt;

&lt;p&gt;First let’s take a look at the first electronic circuit that I ever made for Chem-E-Car:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/first.jpg&#34; alt=&#34;First&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The entire device is a mess! There are wires everywhere, tons of unused board real estate, and parts that have to be tied together to fit on the board. Likewise, unsecured parts have a very unreliable connection and break off easily.&lt;/p&gt;

&lt;p&gt;Over the summer I made a new model with the focus of eliminating loose wires and better utilizing space, this is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/second.jpg&#34; alt=&#34;Second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This model utilizes a lot less space, is easy to stack, and most of the components are stabilized on the board itself. However, during assembly I needed a lot of extra parts since directly soldering them often destroyed the part if not done properly. Another issue is that the model needed 4 stacks (making it really tall), and the lights and switches were not necessary. Now let’s look at the second iteration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/third.jpg&#34; alt=&#34;Third&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The board is even MORE compact, features detachable modules for easy replacement, and utilizes an SD card and opto-gate for recording data. However, the connectors were unreliable, the copper on the board was unprotected and prone to damage which destroyed the circuit at times, and data could not be read in real time.&lt;/p&gt;

&lt;p&gt;To fix these issues I developed a 4th and final board:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/fourth.jpg&#34; alt=&#34;Fourth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This system uses reliable connectors that can only be inserted in one direction, is completely modular (easy to replace destroyed parts), has a silkscreen layer that protects the circuit, only uses one layer, and utilizes a bluetooth system for real time data collection on a mobile phone!&lt;/p&gt;

&lt;p&gt;Here is an image of all the circuits for an overall comparison:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/comparison.jpg&#34; alt=&#34;Comparison&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;reflections&#34;&gt;Reflections&lt;/h3&gt;

&lt;p&gt;These circuits are 1.5 years of continuous design and iteration, with each model having its flaws analyzed and corrected. They were made by an entry level chemical engineering student with NO prior experience or knowledge of electronics. The moral of the story? Good design is all about making something, figuring out what works and doesn’t work then rebuilding it until it sort of works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.ubcchemecar.com/img/blog/trial-and-error/quote.jpg&#34; alt=&#34;Quote&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, to any beginner in terms of design, don’t despair! Rather look at what you can learn from your prototype and how it can be improved.&lt;/p&gt;

&lt;p&gt;In that sense it is important to seek the feedback of experienced individuals. Their experience (in how NOT to do things wrong by doing it wrong) is invaluable for any would-be inventor. Look at how others have done things and learn accordingly from it. Finally remember, every master in a subject started from knowing nothing; the difference between them and the amateurs is that they never stopped trying to learn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>http://www.ubcchemecar.com/blog/2015/09/17/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2015/09/17/go-is-for-lovers/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;http://www.ubcchemecar.com/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;http://www.ubcchemecar.com/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize | lower  }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;http://www.ubcchemecar.com/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo is for lovers</title>
      <link>http://www.ubcchemecar.com/blog/2015/08/03/hugo-is-for-lovers/</link>
      <pubDate>Mon, 03 Aug 2015 13:39:46 +0200</pubDate>
      
      <guid>http://www.ubcchemecar.com/blog/2015/08/03/hugo-is-for-lovers/</guid>
      <description>

&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Goto &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;http://www.ubcchemecar.com/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;

&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;

&lt;p&gt;Follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;

&lt;h2 id=&#34;step-3-change-the-docs-site&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;

&lt;p&gt;Stop the Hugo process by hitting ctrl+c.&lt;/p&gt;

&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;

&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;

&lt;h2 id=&#34;step-4-have-fun&#34;&gt;Step 4. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://www.ubcchemecar.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/contact/</guid>
      <description>

&lt;h1 id=&#34;looking-for-someone&#34;&gt;Looking for someone?&lt;/h1&gt;

&lt;h3 id=&#34;all-general-inquiries-team-ubcchemecar-com-mailto-team-ubcchemecar-com&#34;&gt;All General Inquiries: &lt;a href=&#34;mailto:team@ubcchemecar.com&#34;&gt;team@ubcchemecar.com&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;admin&#34;&gt;Admin&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Captain&amp;rsquo;s email - &lt;a href=&#34;mailto:captain@ubcchemecar.com&#34;&gt;captain@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Junior Team Captains - &lt;a href=&#34;mailto:juniorlead@ubcchemecar.com&#34;&gt;juniorlead@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sponsorship inquiries - &lt;a href=&#34;mailto:sponsorship@ubcchemecar.com&#34;&gt;sponsorship@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Admin and website-related issues - &lt;a href=&#34;mailto:admin@ubcchemecar.com&#34;&gt;admin@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lab Managers - &lt;a href=&#34;mailto:labmanager@ubcchemecar.com&#34;&gt;labmanager@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;senior-team-contacts&#34;&gt;Senior Team Contacts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Battery/Chemical Team - &lt;a href=&#34;mailto:battery@ubcchemecar.com&#34;&gt;battery@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mechanical Team - &lt;a href=&#34;mailto:mechanical@ubcchemecar.com&#34;&gt;mechanical@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Electrical Team - &lt;a href=&#34;mailto:mechanical@ubcchemecar.com&#34;&gt;electrical@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;junior-team-contacts&#34;&gt;Junior Team Contacts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Junior Team Captains - &lt;a href=&#34;mailto:juniorlead@ubcchemecar.com&#34;&gt;juniorlead@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Junior Mechanical Lead - &lt;a href=&#34;mailto:juniormech@ubcchemecar.com&#34;&gt;juniormech@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Junior Battery Lead - &lt;a href=&#34;mailto:juniorbatt@ubcchemecar.com&#34;&gt;juniorbatt@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Junior Chemical Lead - &lt;a href=&#34;mailto:juniorchem@ubcchemecar.com&#34;&gt;juniorchem@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Junior Electrical Lead - &lt;a href=&#34;mailto:juniorelec@ubcchemecar.com&#34;&gt;juniorelec@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal Team Links</title>
      <link>http://www.ubcchemecar.com/internal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/internal/</guid>
      <description>

&lt;h1 id=&#34;lab-access&#34;&gt;Lab Access&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;lab-sign-in-https-form-jotform-com-63001712223236-lab-sign-out-https-form-jotform-com-63001791811246-lab-inventory-https-docs-google-com-spreadsheets-d-1zpqp23z02i8iavz902okutuoukcsblerkjtw3zqjmju-edit-gid-0-h-oaqfsbodl-lab-sop-https-drive-google-com-open-id-0bxa5rjpqh-p-mmhsq1deluhlnjq-upload-safety-certificates-https-form-jotform-com-62887715352263&#34;&gt;&lt;a href=&#34;https://form.jotform.com/63001712223236&#34;&gt;Lab Sign In&lt;/a&gt; | &lt;a href=&#34;https://form.jotform.com/63001791811246&#34;&gt;Lab Sign Out&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1zPqP23Z02I8iavZ902oKUTuOukcSbLERkJTW3zqJMJU/edit#gid=0&amp;amp;h=oAQFsbOdl&#34;&gt;Lab Inventory&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/open?id=0BxA5RJPqh-P_MmhSQ1dELUhLNjQ&#34;&gt;Lab SOP&lt;/a&gt; | &lt;a href=&#34;https://form.jotform.com/62887715352263&#34;&gt;Upload Safety Certificates&lt;/a&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&#34;row text-center&#34;&gt;  
  &lt;div class=&#34;responsiveCal&#34;&gt;
    &lt;iframe src=&#34;https://calendar.google.com/calendar/embed?src=chemecarlogistics%40gmail.com&amp;ctz=America/Vancouver&#34; style=&#34;border-width:0&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;     
  &lt;/div&gt;                     
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;team-assets&#34;&gt;Team Assets&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;google-drive-https-drive-google-com-drive-u-1-folders-0bxa5rjpqh-p-wlzvtlrvmi1gv00-safety-certificates-https-drive-google-com-open-id-0bxa5rjpqh-p-skxwv1dquw5grnm-finance-app-http-finance-ubcchemecar-com-junior-car-battery-proposal-https-drive-google-com-open-id-0bzhmhyppv3ewvmrynzvozklrqy1ewe45u0s1nxh3bmh1ognz&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/u/1/folders/0BxA5RJPqh-P_WlZvTlRvMi1GV00&#34;&gt;Google Drive&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/open?id=0BxA5RJPqh-P_SkxWV1dQUW5GRnM&#34;&gt;Safety Certificates&lt;/a&gt; | &lt;a href=&#34;http://finance.ubcchemecar.com/&#34;&gt;Finance App&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/open?id=0BzHMHyppV3eWVmRyNzVoZklRQy1EWE45U0s1NXh3bmh1OGNz&#34;&gt;Junior Car Battery Proposal&lt;/a&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;misc&#34;&gt;Misc&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ubc-engineering-design-team-handbook-docs-edt-handbook-pdf-iodine-clock-reaction-docs-iodine-clock-reaction-calibration-sop-doc&#34;&gt;&lt;a href=&#34;http://www.ubcchemecar.com/docs/EDT_handbook.pdf&#34;&gt;UBC Engineering Design Team Handbook&lt;/a&gt; | &lt;a href=&#34;http://www.ubcchemecar.com/docs/Iodine-Clock-Reaction-Calibration-SOP.doc&#34;&gt;Iodine Clock Reaction&lt;/a&gt;&lt;/h2&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>New Members Infopack</title>
      <link>http://www.ubcchemecar.com/infopack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/infopack/</guid>
      <description>

&lt;h2 id=&#34;ubc-chem-e-car-team-open-recruitment-policy&#34;&gt;UBC Chem-E-Car Team: Open Recruitment Policy&lt;/h2&gt;

&lt;h4 id=&#34;we-take-in-new-members-undergrad-and-grad-all-year-round-all-skill-levels-departments-and-faculties-welcomed&#34;&gt;We take in new members (undergrad and grad) all year round. All skill levels, departments and faculties welcomed.&lt;/h4&gt;

&lt;p&gt;Zero experience? No problem! If you&amp;rsquo;re interested in joining the team, please read on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;0-next-steps&#34;&gt;0. Next Steps&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Questions: Junior Team Captains - Abhi and Victor at &lt;a href=mailto:juniorlead@ubcchemecar.com&gt;juniorlead@ubcchemecar.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;re interested in joining the team, please read this page carefully.&lt;/p&gt;

&lt;h4 id=&#34;important-notes&#34;&gt;Important notes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that you &lt;strong&gt;sign up for the mailing list&lt;/strong&gt; below.&lt;/li&gt;
&lt;li&gt;UBC Chem-E-Car has four main sub-teams: Electrical, Mechanical, Battery and Chemical. You can be involved with one or more sub-teams. Our team leads have listed some tutorials below that they would like our new members to try out. Feel free to contact them if you need help.&lt;/li&gt;
&lt;li&gt;Email the Junior Team Captains, Abhi and Victor and introduce yourself, they&amp;rsquo;ll provide you with more information on meeting times and answer any questions that you may have.&lt;/li&gt;
&lt;li&gt;Complete your safety certificates as soon as you can. You are still very welcomed to attend our meetings if you haven&amp;rsquo;t completed them, but you won&amp;rsquo;t be able to participate in any hands-on workshop or lab activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-prospective-members-readme&#34;&gt;1. Prospective Members Readme&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Expectations and general information for new members&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Our regular meeting hours for the current academic term are listed in the &lt;a href=&#34;http://www.ubcchemecar.com/contact/&#34;&gt;&lt;b&gt;Contact&lt;/b&gt; page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We value passion, commitment and dedication over prior technical experience. We will &lt;b&gt;never&lt;/b&gt; turn away anyone who&amp;rsquo;s genuinely interested in learning and contributing to the team.&lt;/li&gt;
&lt;li&gt;As a student-driven team, we understand that academics and schoolwork will be your first priority, and we do not expect you to work on our design team projects &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt; and neglect your assignments.&lt;/li&gt;
&lt;li&gt;To be a valuable contributor to the team, you should have a strong sense of responsibility and the ability to work independently with minimal supervision. Your team lead can provide guidance and point you in the right direction, but you are expected to take charge of your own projects.&lt;/li&gt;
&lt;li&gt;If you accept a task from your team lead, we do expect you to see it through to completion to the best of your ability, and within a reasonable amount of time.&lt;/li&gt;
&lt;li&gt;We &lt;b&gt;really&lt;/b&gt; appreciate proactiveness. If a certain job needs to be completed and you can manage it, please take initiative and volunteer! If you think something can be done in a better way, teach us! Everyone is here to learn, irrespective of whether they&amp;rsquo;ve been with the team for 5 years or 5 weeks.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;We want to stress that: &lt;/b&gt; if you have an empty plate and need more stuff to work on, &lt;b&gt;do not hesitate ask&lt;/b&gt;! We always have proposals that need to be written, posters that need to be designed, sponsors to be contacted and many other tasks that need to be completed.&lt;/li&gt;
&lt;li&gt;Most students would consider joining an engineering design team to be a big commitment, and we tend to agree. Feel free to just drop by our regular meetings or events to explore our projects and your options, absolutely no pressure to commit for the whole term/year!&lt;/li&gt;
&lt;li&gt;We want everyone to learn new skills through our projects and have fun working in a team. But it is important to note that ultimately, your personal experience and what you get out of the team is what you put in.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;2-sign-up-for-the-mailing-list&#34;&gt;2. Sign Up For the Mailing List&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;New and prospective members: Please sign up for the mailing list before you do anything else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;

&lt;p&gt;&lt;link href=&#34;//cdn-images.mailchimp.com/embedcode/classic-10_7.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;
&lt;style type=&#34;text/css&#34;&gt;
#mc_embed_signup{background:#ffe; clear:left; font:14px Helvetica,Arial,sans-serif; }
&lt;/style&gt;
&lt;div id=&#34;mc_embed_signup&#34;&gt;
&lt;form action=&#34;//ubcchemecar.us11.list-manage.com/subscribe/post?u=919b72f1aaf70072354dd9010&amp;amp;id=fb55bcb4c5&#34; method=&#34;post&#34; id=&#34;mc-embedded-subscribe-form&#34; name=&#34;mc-embedded-subscribe-form&#34; class=&#34;validate&#34; target=&#34;_blank&#34; novalidate&gt;
&lt;div id=&#34;mc_embed_signup_scroll&#34;&gt;
&lt;h2&gt;UBC Chem-E-Car Mailing List&lt;/h2&gt;
  &lt;div class=&#34;indicates-required&#34;&gt;&lt;span class=&#34;asterisk&#34;&gt;&lt;em&gt;&lt;/span&gt; indicates required&lt;/div&gt;
  &lt;div class=&#34;mc-field-group&#34;&gt;
&lt;label for=&#34;mce-EMAIL&#34;&gt;Email Address  &lt;span class=&#34;asterisk&#34;&gt;&lt;/em&gt;&lt;/span&gt;
  &lt;/label&gt;
&lt;input type=&#34;email&#34; value=&#34;&#34; name=&#34;EMAIL&#34; class=&#34;required email&#34; id=&#34;mce-EMAIL&#34;&gt;
  &lt;/div&gt;
  &lt;div class=&#34;mc-field-group&#34;&gt;
&lt;label for=&#34;mce-FNAME&#34;&gt;First Name &lt;/label&gt;
&lt;input type=&#34;text&#34; value=&#34;&#34; name=&#34;FNAME&#34; class=&#34;&#34; id=&#34;mce-FNAME&#34;&gt;
  &lt;/div&gt;
  &lt;div class=&#34;mc-field-group&#34;&gt;
&lt;label for=&#34;mce-LNAME&#34;&gt;Last Name &lt;/label&gt;
&lt;input type=&#34;text&#34; value=&#34;&#34; name=&#34;LNAME&#34; class=&#34;&#34; id=&#34;mce-LNAME&#34;&gt;
  &lt;/div&gt;
&lt;div id=&#34;mce-responses&#34; class=&#34;clear&#34;&gt;
  &lt;div class=&#34;response&#34; id=&#34;mce-error-response&#34; style=&#34;display:none&#34;&gt;&lt;/div&gt;
  &lt;div class=&#34;response&#34; id=&#34;mce-success-response&#34; style=&#34;display:none&#34;&gt;&lt;/div&gt;
&lt;/div&gt;    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
  &lt;div style=&#34;position: absolute; left: -5000px;&#34; aria-hidden=&#34;true&#34;&gt;&lt;input type=&#34;text&#34; name=&#34;b_919b72f1aaf70072354dd9010_fb55bcb4c5&#34; tabindex=&#34;-1&#34; value=&#34;&#34;&gt;&lt;/div&gt;
  &lt;div class=&#34;clear&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Subscribe&#34; name=&#34;subscribe&#34; id=&#34;mc-embedded-subscribe&#34; class=&#34;button&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;/form&gt;
  &lt;/div&gt;
  &lt;script type=&#39;text/javascript&#39; src=&#39;//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js&#39;&gt;&lt;/script&gt;&lt;script type=&#39;text/javascript&#39;&gt;(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]=&amp;lsquo;EMAIL&amp;rsquo;;ftypes[0]=&amp;lsquo;email&amp;rsquo;;fnames[1]=&amp;lsquo;FNAME&amp;rsquo;;ftypes[1]=&amp;lsquo;text&amp;rsquo;;fnames[2]=&amp;lsquo;LNAME&amp;rsquo;;ftypes[2]=&amp;lsquo;text&amp;rsquo;;}(jQuery));var $mcj = jQuery.noConflict(true);&lt;/script&gt;
  &lt;!--End mc_embed_signup--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;3-safety-certificates&#34;&gt;3. Safety Certificates&lt;/h2&gt;

&lt;p&gt;Complete the following &lt;a href=&#34;https://www.hse2.ubc.ca/moodle/course/&#34;&gt;ONLINE SAFETY QUIZZES&lt;/a&gt; provided by UBC Risk Management Services. To gain access to our lab and workshop space, please &lt;b&gt;print out a hardcopy of these certificates&lt;/b&gt; and pass it to Negar (safety officer) at the next meeting. You can still attend our meetings but you won&amp;rsquo;t have lab or workshop access if you don&amp;rsquo;t complete these certificates. You&amp;rsquo;ll also need to register as an AIChE (American Institute of Chemical Engineers) student member and pass the AIChE safety quiz to compete in any Chem-E-Car competition organized by AIChE.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mandatory Certificates, COMPLETE ASAP&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Engineering Design Team Safety Orientation&lt;/li&gt;
&lt;li&gt;Preventing and Addressing Workplace Bullying and Harassment&lt;/li&gt;
&lt;li&gt;Chemical Safety Course&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AIChE Registration and Safety Test, COMPLETE ASAP&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Complete the &lt;a href=&#34;http://www.aiche.org/community/students/chem-e-car-competition-rules/safety-training-test&#34;&gt;Chem-E-Car Competition® Safety Training Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sign up for a FREE AIChE student membership &lt;a href=&#34;http://www.aiche.org/community/students/student-membership&#34;&gt;AIChE Registration Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;4-electrical-tutorials&#34;&gt;4. Electrical Tutorials&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Contact Ngai To at logistics@ubcchemecar.com for questions or if you want to join the electrical team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The consensus is to focus on software skills, i.e. Arduino and general coding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mandatory&lt;/strong&gt;
- Work through these introductory software and web development tutorials as fast as you can, let us know in the group chat if you get stuck. &lt;a href=&#34;https://github.com/ubcchemecar/beginners-tutorial&#34;&gt;Available on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you haven&amp;rsquo;t, please download the latest version of Arduino: &lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Download the Arduino Software&lt;/a&gt; and take a look at the coding for an encoder wheel. You can &lt;a href=&#34;http://machinedesign.com/sensors/basics-rotary-encoders-overview-and-new-technologies-0&#34;&gt;read more here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;5-mechanical-tutorials&#34;&gt;5. Mechanical Tutorials&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Contact Kyle at mechanical@ubcchemecar.com for questions or if you want to join the mechanical team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try to get as familiar as possible with either Solidworks or Inventor before the next meeting. Note: You&amp;rsquo;ve learned/will be learning Solidworks in First Year Engineering.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and install Solidworks (caution: 8 GB file) &lt;a href=&#34;http://students.engineering.ubc.ca/success/software/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and install Inventor (caution: 15 GB file) &lt;a href=&#34;http://www.autodesk.com/education/free-software/featured&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note: Chem-E-Car will be using Inventor mainly but will have some projects in Solidwor&lt;/li&gt;
&lt;li&gt;Solidworks : Please begin learning the program &lt;a href=&#34;https://www.youtube.com/watch?v=cy3ExIAcI2Y&#34;&gt;use this video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inventor: There is a built in tutorial. Please try to &lt;b&gt;complete tutorial part 1 and 2&lt;/b&gt; in the progr&lt;/li&gt;
&lt;li&gt;Try doing  &lt;a href=&#34;docs/Alistirmalar.pdf&#34;&gt; excercises up to 2-4 in this pdf&lt;/a&gt; using either Solidworks or Invent&lt;/li&gt;
&lt;li&gt;Exercise 2-5 is feasible but there are many shortcuts to make the pieces faster. Look up design tables, scale, or drawing relations, if you are interested.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn how to make a sphere&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-h2tCWrvaUM &#34;&gt;Solidworks: How to Make a Sphere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=psbjvl6kaH4&#34;&gt;Inventor: How to Make a Sphere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;6-battery-and-chemical-tutorials&#34;&gt;6. Battery and Chemical Tutorials&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Contact Andy or Mani at battery@ubcchemecar.com for both chemical and battery teams&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please complete the following steps if you&amp;rsquo;re interested in joining the battery or chemical team. Note: we don&amp;rsquo;t expect you to understand EVERYTHING that we want you to read here, we just want you to get a good overview of some basic principles and type of batteries that we&amp;rsquo;ll be working on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bring a laptop to every meeting if you can, there will be a lot of research and Googling involved in most meetings.&lt;/li&gt;
&lt;li&gt;Review redox chemistry on ChemGuide &lt;a href=&#34;http://www.chemguide.co.uk/inorganic/redoxmenu.html&#34;&gt;http://www.chemguide.co.uk/inorganic/redoxmenu.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review the offical AIChE competition and safety rules &lt;a href=&#34;http://www.aiche.org/chem-e-car-competitionr-rules&#34;&gt;http://www.aiche.org/chem-e-car-competitionr-rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;battery&#34;&gt;Battery&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Read Chapter 13 and 38.3 on Zn-Air batteries in Linden&amp;rsquo;s Handbook of Batteries (Google around for a free PDF if the link doesn&amp;rsquo;t work) &lt;a href=&#34;http://www.etf.unssa.rs.ba/~slubura/diplomski_radovi/Zavrsni_rad_MarkoSilj/Literatura/Handbook%20Of%20Batteries%203rd%20Edition.pdf&#34;&gt;PDF Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read Chapter 31 on Nickel-Zinc batteries in Linden&amp;rsquo;s Handbook of Batteries &lt;a href=&#34;http://www.etf.unssa.rs.ba/~slubura/diplomski_radovi/Zavrsni_rad_MarkoSilj/Literatura/Handbook%20Of%20Batteries%203rd%20Edition.pdf&#34;&gt;PDF Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;chemical&#34;&gt;Chemical&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Read up on the Iodine Clock Reaction: &lt;a href=&#34;http://imaginationstationtoledo.org/content/2012/06/the-iodine-clock-reaction/&#34;&gt;Click This Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;7-web-development-and-software-tutorials&#34;&gt;7. Web Development and Software Tutorials&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Contact Siang at admin@ubcchemecar.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;re interested in web development, complete the following steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/join&#34;&gt;Sign up&lt;/a&gt; for a GitHub account&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://confluence.atlassian.com/bitbucket/set-up-git-744723531.html&#34;&gt;Setup Git&lt;/a&gt; on your machine.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://www.learnenough.com/git-tutorial&#34;&gt;Learn Enough Git tutorial&lt;/a&gt; and understand the basics. You may also want to read their Command Line tutorial and Text Editor tutorial if you&amp;rsquo;re unfamiliar with those tools.&lt;/li&gt;
&lt;li&gt;Email &lt;b&gt;Siang at admin@ubcchemecar.com &lt;/b&gt; for further instructions once you feel comfortable with the basics. Feel free to email too if you have any questions along the way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;beginners-start-here&#34;&gt;Beginners, start here!&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yourhtmlsource.com/starthere/whatishtml.html&#34;&gt;Find out what is HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.learnenough.com/command-line-tutorial&#34;&gt;Learn Enough Command Line To Be Dangerous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://html.net/tutorials/css/lesson1.php&#34;&gt;Find out what is CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;the-bootstrap-framework&#34;&gt;The Bootstrap framework&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/twitter-bootstrap-tutorial-handling-complex-designs/&#34;&gt;Introduction to Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=no-Ntkc836w&#34;&gt;Excellent 15-minute YouTube tutorial on Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git&#34;&gt;Git&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0fKg7e37bQE&#34;&gt;What the heck is Github?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.learnenough.com/git-tutorial&#34;&gt;Learn Enough Git To Be Dangerous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;web-fundamentals&#34;&gt;Web Fundamentals&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/&#34;&gt;https://developers.google.com/web/fundamentals/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;8-administration&#34;&gt;8. Administration&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Contact Thanos or Siang - captain@ubcchemecar.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;re always looking for people to help out with sponsorship, finances, lab and workspace management, marketing and lots of other important administrative stuff that keeps the team well-funded and running smoothly. Contact us if you&amp;rsquo;d like to help out.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Sponsorship</title>
      <link>http://www.ubcchemecar.com/sponsors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/sponsors/</guid>
      <description>

&lt;h2 id=&#34;2016-2017-sponsorship-package-docs-ubc-chem-e-car-2016-2017-pdf&#34;&gt;&lt;a href=&#34;http://www.ubcchemecar.com/docs/UBC_Chem-E-Car_2016-2017.pdf&#34;&gt;2016-2017 Sponsorship Package&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Team</title>
      <link>http://www.ubcchemecar.com/team/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/team/</guid>
      <description>

&lt;h2 id=&#34;view-orgchart-orgchart&#34;&gt;&lt;a href=&#34;http://www.ubcchemecar.com/orgchart/&#34;&gt;View Orgchart&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>orgchart</title>
      <link>http://www.ubcchemecar.com/orgchart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ubcchemecar.com/orgchart/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>